/* The following code was generated by JFlex 1.4.3 on 10/12/13 1:27 PM */

package org.neo4j.cypher.lang.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.neo4j.cypher.lang.parser.CypherParserTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/12/13 1:27 PM from the specification file
 * <tt>D:/projects-backup/cypher-intellij-plugin/src/org/neo4j/cypher/lang/lexer/_CypherLexer.flex</tt>
 */
public class _CypherLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\0\1\14"+
    "\4\0\1\12\1\30\1\31\1\47\1\46\1\41\1\6\1\11\1\0"+
    "\1\10\11\7\1\43\1\0\1\45\1\44\3\0\1\20\1\5\1\15"+
    "\1\26\1\17\2\5\1\40\1\25\2\5\1\42\1\5\1\23\1\22"+
    "\1\36\1\34\1\16\1\24\1\21\1\27\1\5\1\37\1\35\2\5"+
    "\1\0\1\13\2\0\1\4\1\0\32\5\1\32\1\0\1\33\54\0"+
    "\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0"+
    "\u01ca\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\201\0"+
    "\5\3\1\0\2\3\2\0\4\3\10\0\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\24\3\1\0\123\3\1\0\213\3\10\0\236\3\11\0"+
    "\46\3\2\0\1\3\7\0\47\3\110\0\33\3\5\0\3\3\55\0"+
    "\53\3\43\0\2\3\1\0\143\3\1\0\1\3\17\0\2\3\7\0"+
    "\2\3\12\0\3\3\2\0\1\3\20\0\1\3\1\0\36\3\35\0"+
    "\131\3\13\0\1\3\30\0\41\3\11\0\2\3\4\0\1\3\5\0"+
    "\26\3\4\0\1\3\11\0\1\3\3\0\1\3\27\0\31\3\253\0"+
    "\66\3\3\0\1\3\22\0\1\3\7\0\12\3\17\0\7\3\1\0"+
    "\7\3\5\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\1\3\3\0\4\3\3\0\1\3\20\0\1\3\15\0\2\3\1\0"+
    "\3\3\16\0\2\3\23\0\6\3\4\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\2\3\37\0\4\3\1\0"+
    "\1\3\23\0\3\3\20\0\11\3\1\0\3\3\1\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\5\3\3\0\1\3\22\0\1\3\17\0"+
    "\2\3\43\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\5\3\3\0\1\3\36\0\2\3\1\0\3\3\17\0"+
    "\1\3\21\0\1\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0"+
    "\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0"+
    "\14\3\26\0\1\3\64\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\12\3\1\0\5\3\3\0\1\3\32\0\2\3\6\0\2\3\43\0"+
    "\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\3\0"+
    "\1\3\40\0\1\3\1\0\2\3\17\0\2\3\22\0\10\3\1\0"+
    "\3\3\1\0\51\3\2\0\1\3\20\0\1\3\21\0\2\3\30\0"+
    "\6\3\5\0\22\3\3\0\30\3\1\0\11\3\1\0\1\3\2\0"+
    "\7\3\72\0\60\3\1\0\2\3\14\0\7\3\72\0\2\3\1\0"+
    "\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0"+
    "\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0"+
    "\4\3\1\0\2\3\11\0\1\3\2\0\5\3\1\0\1\3\25\0"+
    "\2\3\42\0\1\3\77\0\10\3\1\0\44\3\33\0\5\3\163\0"+
    "\53\3\24\0\1\3\20\0\6\3\4\0\4\3\3\0\1\3\3\0"+
    "\2\3\7\0\3\3\4\0\15\3\14\0\1\3\21\0\46\3\12\0"+
    "\53\3\1\0\1\3\3\0\u0149\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0"+
    "\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0"+
    "\71\3\1\0\4\3\2\0\103\3\45\0\20\3\20\0\125\3\14\0"+
    "\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\25\0\15\3\1\0"+
    "\4\3\16\0\22\3\16\0\22\3\16\0\15\3\1\0\3\3\17\0"+
    "\64\3\43\0\1\3\4\0\1\3\103\0\130\3\10\0\51\3\1\0"+
    "\1\3\5\0\106\3\12\0\35\3\63\0\36\3\2\0\5\3\13\0"+
    "\54\3\25\0\7\3\70\0\27\3\11\0\65\3\122\0\1\3\135\0"+
    "\57\3\21\0\7\3\67\0\36\3\15\0\2\3\20\0\46\3\32\0"+
    "\44\3\51\0\3\3\12\0\44\3\153\0\4\3\1\0\4\3\16\0"+
    "\300\3\100\0\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3\2\0"+
    "\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3\2\0"+
    "\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0"+
    "\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3\164\0"+
    "\1\3\15\0\1\3\20\0\15\3\145\0\1\3\4\0\1\3\2\0"+
    "\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0"+
    "\1\3\64\0\2\3\u0a7b\0\57\3\1\0\57\3\1\0\205\3\6\0"+
    "\4\3\21\0\46\3\12\0\66\3\11\0\1\3\20\0\27\3\11\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\120\0\1\3\u01d5\0\2\3\52\0"+
    "\5\3\5\0\2\3\4\0\126\3\6\0\3\3\1\0\132\3\1\0"+
    "\4\3\5\0\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0"+
    "\u19b6\3\112\0\u51cc\3\64\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0"+
    "\20\3\12\0\2\3\24\0\57\3\20\0\31\3\10\0\106\3\61\0"+
    "\11\3\2\0\147\3\2\0\4\3\1\0\2\3\16\0\12\3\120\0"+
    "\10\3\1\0\3\3\1\0\4\3\1\0\27\3\35\0\64\3\16\0"+
    "\62\3\76\0\6\3\3\0\1\3\16\0\34\3\12\0\27\3\31\0"+
    "\35\3\7\0\57\3\34\0\1\3\60\0\51\3\27\0\3\3\1\0"+
    "\10\3\24\0\27\3\3\0\1\3\5\0\60\3\1\0\1\3\3\0"+
    "\2\3\2\0\5\3\2\0\1\3\1\0\1\3\30\0\3\3\43\0"+
    "\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3\221\0"+
    "\43\3\35\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0\u012e\3\2\0"+
    "\76\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\0"+
    "\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3\50\0"+
    "\14\3\164\0\5\3\1\0\207\3\44\0\32\3\6\0\32\3\13\0"+
    "\131\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\2\1"+
    "\13\3\1\7\1\10\1\11\1\12\2\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\2\0\1\21\3\0\11\3"+
    "\1\22\1\23\3\3\1\24\5\3\1\25\4\3\1\26"+
    "\1\3\1\27\2\3\1\30\6\3\1\31\2\3\1\32"+
    "\2\3\1\33\1\3\1\34\1\35\2\3\1\36\3\3"+
    "\1\37\4\3\1\40\1\41\2\3\1\42\1\43\1\3"+
    "\1\44\1\45\1\3\1\46\3\3\1\47\1\3\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\50"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\50\0\50\0\50"+
    "\0\50\0\u0320\0\u0348\0\50\0\50\0\50\0\50\0\240"+
    "\0\50\0\u0370\0\u0118\0\50\0\u0398\0\u0140\0\u03c0\0\u03e8"+
    "\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528"+
    "\0\170\0\170\0\u0550\0\u0578\0\u05a0\0\170\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0640\0\u0668\0\u0370\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\170\0\u0730\0\170\0\u0758\0\u0780\0\170\0\u07a8\0\u07d0"+
    "\0\u07f8\0\u0820\0\u0848\0\u0870\0\170\0\u0898\0\u08c0\0\170"+
    "\0\u08e8\0\u0910\0\170\0\u0938\0\170\0\170\0\u0960\0\u0988"+
    "\0\170\0\u09b0\0\u09d8\0\u0a00\0\170\0\u0a28\0\u0a50\0\u0a78"+
    "\0\u0aa0\0\170\0\170\0\u0ac8\0\u0af0\0\170\0\170\0\u0b18"+
    "\0\170\0\170\0\u0b40\0\170\0\u0b68\0\u0b90\0\u0bb8\0\170"+
    "\0\u0be0\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\4\1\32\1\4\1\33\1\4"+
    "\1\34\1\4\1\35\1\36\1\37\1\40\1\41\51\0"+
    "\2\3\51\0\2\4\1\0\2\4\4\0\13\4\4\0"+
    "\5\4\1\0\1\4\14\0\1\6\1\7\46\0\2\6"+
    "\1\42\47\0\1\42\36\0\12\43\1\44\1\45\34\43"+
    "\13\46\1\47\1\44\33\46\4\0\2\4\1\0\2\4"+
    "\4\0\1\4\1\50\1\4\1\51\1\4\1\52\5\4"+
    "\4\0\5\4\1\0\1\4\11\0\2\4\1\0\2\4"+
    "\4\0\2\4\1\53\10\4\4\0\5\4\1\0\1\4"+
    "\11\0\2\4\1\0\2\4\4\0\6\4\1\54\4\4"+
    "\4\0\5\4\1\0\1\55\11\0\2\4\1\0\2\4"+
    "\4\0\6\4\1\56\1\57\3\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\13\4\4\0"+
    "\4\4\1\60\1\0\1\4\11\0\2\4\1\0\2\4"+
    "\4\0\1\4\1\61\4\4\1\62\4\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\5\4"+
    "\1\63\5\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\4\4\1\64\6\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\6\4"+
    "\1\65\1\66\3\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\1\4\1\67\6\4\1\70"+
    "\2\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\6\4\1\71\4\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\5\4\1\72"+
    "\5\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\13\4\4\0\4\4\1\73\1\0\1\4"+
    "\14\0\2\74\37\0\2\43\1\0\45\43\2\46\1\0"+
    "\45\46\4\0\2\4\1\0\2\4\4\0\2\4\1\75"+
    "\10\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\7\4\1\76\3\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\6\4\1\77"+
    "\4\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\4\4\1\100\6\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\11\4\1\101"+
    "\1\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\7\4\1\102\3\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\11\4\1\103"+
    "\1\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\7\4\1\104\3\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\2\4\1\105"+
    "\10\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\4\4\1\106\4\4\1\107\1\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\3\4\1\110\7\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\11\4\1\111\1\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\5\4\1\112\5\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\7\4\1\113\3\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\10\4\1\114\2\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\1\4\1\115\11\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\2\4\1\116\10\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\3\4\1\117\7\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\2\4\1\120\10\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\7\4\1\121\3\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\12\4\1\122\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\2\4\1\123\10\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\2\4"+
    "\1\124\10\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\6\4\1\125\4\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\2\4"+
    "\1\126\10\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\1\4\1\127\11\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\2\4"+
    "\1\130\10\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\13\4\4\0\2\4\1\131\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\4\4"+
    "\1\132\6\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\13\4\4\0\1\133\4\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\1\4\1\134"+
    "\4\4\1\135\4\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\4\4\1\136\6\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\4\4\1\137\6\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\1\4\1\140\11\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\1\4\1\141\11\4\4\0\5\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\4\4\1\142\6\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\13\4\4\0\1\4\1\143\3\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\4\0\10\4\1\144\2\4\4\0"+
    "\5\4\1\0\1\4\11\0\2\4\1\0\2\4\4\0"+
    "\12\4\1\145\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\2\4\1\146\10\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\2\4"+
    "\1\147\10\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\1\4\1\150\11\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\6\4"+
    "\1\151\4\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\4\4\1\152\6\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\6\4"+
    "\1\153\4\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\2\4\1\154\10\4\4\0\5\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\4\0\3\4"+
    "\1\155\7\4\4\0\5\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\4\0\1\156\12\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\10\4\1\157"+
    "\2\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\4\4\1\160\6\4\4\0\5\4\1\0"+
    "\1\4\11\0\2\4\1\0\2\4\4\0\6\4\1\161"+
    "\4\4\4\0\5\4\1\0\1\4\11\0\2\4\1\0"+
    "\2\4\4\0\4\4\1\162\6\4\4\0\5\4\1\0"+
    "\1\4\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\15\1\4\11\2\1\4\11"+
    "\1\1\1\11\2\0\1\11\3\0\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CypherLexer() {
    this((java.io.Reader)null);
  }


  public _CypherLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CypherLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1560) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return CREATE;
          }
        case 41: break;
        case 40: 
          { return CONSTRAINT;
          }
        case 42: break;
        case 14: 
          { return LT;
          }
        case 43: break;
        case 22: 
          { return END;
          }
        case 44: break;
        case 5: 
          { return INTEGER;
          }
        case 45: break;
        case 9: 
          { return LBRACE;
          }
        case 46: break;
        case 10: 
          { return RBRACE;
          }
        case 47: break;
        case 29: 
          { return NODE;
          }
        case 48: break;
        case 25: 
          { return XOR;
          }
        case 49: break;
        case 7: 
          { return LPAR;
          }
        case 50: break;
        case 38: 
          { return UNIQUE;
          }
        case 51: break;
        case 30: 
          { return DROP;
          }
        case 52: break;
        case 11: 
          { return COMMA;
          }
        case 53: break;
        case 6: 
          { return DOT;
          }
        case 54: break;
        case 18: 
          { return OR;
          }
        case 55: break;
        case 34: 
          { return WHERE;
          }
        case 56: break;
        case 33: 
          { return INDEX;
          }
        case 57: break;
        case 12: 
          { return COLON;
          }
        case 58: break;
        case 23: 
          { return AND;
          }
        case 59: break;
        case 24: 
          { return NOT;
          }
        case 60: break;
        case 39: 
          { return DISTINCT;
          }
        case 61: break;
        case 32: 
          { return START;
          }
        case 62: break;
        case 8: 
          { return RPAR;
          }
        case 63: break;
        case 37: 
          { return ASSERT;
          }
        case 64: break;
        case 28: 
          { return THEN;
          }
        case 65: break;
        case 3: 
          { return ID;
          }
        case 66: break;
        case 19: 
          { return ON;
          }
        case 67: break;
        case 27: 
          { return ELSE;
          }
        case 68: break;
        case 36: 
          { return RETURN;
          }
        case 69: break;
        case 21: 
          { return DECIMAL;
          }
        case 70: break;
        case 26: 
          { return CASE;
          }
        case 71: break;
        case 4: 
          { return MINUS;
          }
        case 72: break;
        case 20: 
          { return IS;
          }
        case 73: break;
        case 17: 
          { return STRING;
          }
        case 74: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 75: break;
        case 31: 
          { return WHEN;
          }
        case 76: break;
        case 13: 
          { return EQ;
          }
        case 77: break;
        case 15: 
          { return PLUS;
          }
        case 78: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 79: break;
        case 16: 
          { return MUL;
          }
        case 80: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
